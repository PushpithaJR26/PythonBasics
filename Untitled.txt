


Solutions for Hackerrank Contest
 (DSA + problem solving using python)


Driving license program

n = int(input())
if n < 18:
   print("Ineligible")
else:
   print("Eligible")


Calculator program

num1 = int(input())
num2 = int(input())
operator = input()[0]


if operator == '+':
   print(num1 + num2)
elif operator == '-':
   print(num1 - num2)
elif operator == '*':
   print(num1 * num2)
elif operator == '/':
   print(num1 // num2)
else:
   print("Invalid operator")


Pattern-One solution

n = int(input())
for row in range(1, n + 1):
   for star in range(row):
       print("*", end = "")
   print()

https://pastebin.com/MqMZPzM0

Pattern-Two solution

n = int(input())
for row in range(1, n + 1):
   for col in range(1, row + 1):
       print(col, end = "")
   print()




Pattern-Three solution

n = int(input())
for row in range(n):
   for col in range(n):
       print("*", end = "")
   print()




Pattern-Four solution

n = int(input())
spaces = 0


for row in range(n):
   for space in range(spaces):
       print(" ", end = "")
   for star in range(n):
       print("*", end = "")
   spaces += 1
   print()




Pattern-Five solution

n = int(input())
for row in range(n, 0, -1):
   for star in range(row):
       print("*", end = "")
   print()




Pattern-Six solution

n = int(input())
spaces = n - 1
stars = 1


for row in range(1, n + 1):
   for space in range(spaces):
       print(" ", end = "")
      
   spaces -= 1
  
   for star in range(stars):
       print("*", end = "")
   stars += 1
   print()




Pattern-Seven solution

n = int(input())
spaces = n - 1
for row in range(1, n + 1):
      
   for space in range(spaces):
       print(" ", end = "")
   spaces -= 1
  
   for col in range(1, row + 1):
       print(col, end = "")
   print()


Pattern-Eight solution

n = int(input())
stars = n
spaces = 0


for row in range(n):
   for space in range(spaces):
       print(" ", end = "")
      
   spaces += 1
  
   for star in range(stars):
       print("*", end = "")
   stars -= 1
  
   print()




Pattern-Nine solution

n = int(input())
spaces = n - 1
stars = 1


for row in range(n):
   for space in range(spaces):
       print(" ", end = "")
   spaces -= 1
  
   for star in range(stars):
       print("*", end = "")
   stars += 2
   print()


Pattern-Ten solution

n = int(input())
spaces = 0


for row in range(n, 0, -1):
   for space in range(spaces):
       print(" ", end = "")
      
   spaces += 1
  
   for star in range(2 * row - 1):
       print("*", end = "")
   print()



Pattern-Eleven solution

n = int(input())
spaces = n - 1
for row in range(1, n + 1):
      
   for space in range(spaces):
       print(" ", end = "")
   spaces -= 1
  
   val = 1
   for num in range(2 * row - 1):
       print(val, end = "")
       val += 1
   print()




Pattern-Twelve solution

n = int(input())
spaces = 0
for row in range(n, 0, -1):
   val = 1
   for space in range(spaces):
       print(" ", end = " ")
   spaces += 1
  
   for num in range(2 * row - 1):
       print(val, end = " ")
       val += 1
   print()




Pattern-Thirteen solution

n = int(input())
val = 10
for i in range(1, n + 1):
   for j in range(i):
       print(val, end = " ")
       val += 10
   print()




Pattern-Fourteen solution

n = int(input())
for i in range(1, n + 1):
   for j in range(i):
       if i % 2 == 0:
           print("#", end = "")
       else:
           print("*", end = "")
   print()





Pattern-Fifteen solution:

n = int(input())
for i in range(1, n + 1):
   val1 = i
   val2 = 1
   for j in range(i):
       if i % 2 == 0:
           print(val1, end = " ")
           val1 -= 1
       else:
           print(val2, end = " ")
           val2 += 1
   print()




Pattern-Sixteen solution:
	
n = int(input())
for i in range(1, n + 1):
   for j in range(i):
       if i % 2 == 0:
           print("@", end = "")
       else:
           print(i, end = "")
   print()




Pattern-Seventeen solution:

n = int(input())
spaces = 0
for i in range(n, 0, -1):
  for j in range(spaces):
      print(" ",  end = " ")
  spaces += 1
   letter = 65
  for j in range(i):
      print(chr(letter), end = " ")
      letter += 1
  print()





Pattern-Eighteen solution

n = int(input())
spaces = 0


for i in range(n, 0, -1):
   for j in range(spaces):
       print(" ", end = " ")
   spaces += 1
   for j in range(2 * i - 1):
       print("*", end = " ")
   print()




Pattern-Nineteen solution

n = int(input())
spaces = n - 1
stars = 1
for row in range(1, n + 1):
  for space in range(spaces):
      print(" ", end = " ")
  spaces -= 1
   for star in range(stars):
      print("*", end = " ")
  stars += 2
  print()
 stars -= 4
spaces = 1

for row in range(1, n):
  for space in range(spaces):
      print(" ", end = " ")
  spaces += 1
   for star in range(stars):
      print("*", end = " ")
  stars -= 2
  print()

Pattern-Twenty solution

n = int(input())


stars = 2 * n - 1
spaces = 0


for row in range(n):
   for space in range(spaces):
       print(" ", end = " ")
   spaces += 1
  
   for star in range(stars):
       print("*", end = " ")
   stars -= 2
   print()
  
stars += 4
spaces -= 2
for row in range(1, n):
   for space in range(spaces):
       print(" ", end = " ")
   spaces -= 1
  
   for star in range(stars):
       print("*", end = " ")
   stars += 2
   print()

Linear search 

target = int(input())
n = int(input())
l = list(map(int, input().strip().split()))
index = -1
for i in range(n):
   if l[i] == target:
       index = i
       break
      
if index == -1:
   print("Target is not present")
else:
   print("Target is present at index:", index)


Classes and Objects  (Student details)

class Box:
   def __init__(self, currentName, currentRollNo, currentdbmsMarks, currentPythonMarks, currentCMarks, currentOSMarks, currentCNMarks):
       self.name = currentName
       self.rollNo = currentRollNo
       self.dbmsMarks = currentdbmsMarks
       self.pythonMarks = currentPythonMarks
       self.cMarks = currentCMarks
       self.osMarks = currentOSMarks
       self.cnMarks = currentCNMarks
      
   def printDetails(self):
       print(self.name, self.rollNo, self.dbmsMarks, self.pythonMarks, self.cMarks, self.osMarks, self.cnMarks)
      


student1 = Box("Harika", "5A1", 78, 67, 77, 89, 46)
student2 = Box("Swapna", "5A2", 38, 65, 97, 59, 41)
student3 = Box("Sushma", "5A3", 88, 95, 47, 89, 31)


student1.printDetails()
student2.printDetails()
student3.printDetails()
      


Classes and objects (Amazon card)

class Card:
   def __init__(self, currId, currImageUrl, currDeviceType, currPrice, curRating):
       self.id = currId
       self.imageUrl = currImageUrl
       self.deviceType = currDeviceType
       self.price = currPrice
       self.rating = curRating
      
   def printDetails(self):
       print("Product -", self.id, ":")
       print("imageUrl:", self.imageUrl)
       print("deviceType:", self.deviceType)
       print("price:", self.price)
       print("rating:", self.rating)
      
      
mobile = Card(1, "Dummy-url 1", "Mobile", 56000, 4.5)
laptop = Card(2, "Dummy-url 2", "Laptop", 94000, 4.8)
watch = Card(3, "Dummy-url 3", "Smart-watch", 18000, 3.5)


mobile.printDetails()
print()
laptop.printDetails()
print()
watch.printDetails()



